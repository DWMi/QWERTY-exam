import Head from "next/head";
import { useRouter } from "next/router";
import db from "../utils/db";
import Order from "../models/Order";
import s from "../styles/Profile.module.css";
import { useSession } from "next-auth/react";
import React, { useEffect, useState } from "react";
import ProfileOrder from "../components/ProfileOrder/ProfileOrder";
import CircularProgress from "@mui/material/CircularProgress";

export async function getServerSideProps(context) {
  await db.connect();
  const orders = await Order.find().lean();
  await db.disconnect();
  return {
    props: {
      orders: orders.map(db.convertDocToObj),
    },
  };
}

export default function Profile({ orders }) {
  const { data: session } = useSession();
  const [sessionData, setSessionData] = useState(null);
  const [loading, setLoading] = useState(true);
  const userID = sessionData?.user._id;
  const userOrders = [];
  for (let index = 0; index < orders.length; index++) {
    const order = orders[index];
    if (order.userId === userID) {
      userOrders.push(order);
    }
  }
  const router = useRouter();

  const [selectedOrder, setSelectedOrder] = useState("");
  const [open, setOpen] = useState(false);

  const handleOpen = (order) => {
    setOpen(true);
    setSelectedOrder(order);
  };

  const handleClose = () => {
    router.push("/profile");
    setOpen(false);
  };

  useEffect(() => {
    setSessionData(session);
    if (!sessionData) {
      setTimeout(() => {
        setLoading(false);
      }, 1000);
    } else {
      setLoading(false);
    }
  }, [session]);
  if (!sessionData && loading === false) {
    router.push("/login");
  }

  return (
    <>
      <Head>
        <title>QWERTY - Profile</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {loading ? (
        <div className={s.centerContainer}>
          <CircularProgress color="inherit" />
        </div>
      ) : !sessionData ? (
        <div className={s.centerContainer}>
          <h1>You're not logged in or registered yet</h1>
        </div>
      ) : (
        <>
          <div className={s.centerContainer}>
            <div className={s.containerUser}>
              <h1 className={s.title}>Your info</h1>
              <div className={s.infoContainer}>
                <h1>
                  Name: {session?.user.firstName} {session?.user.lastName}
                </h1>
                <h1>Email: {session?.user.email}</h1>
                <h1>Address: {session?.user.address}</h1>
                <br />
                <br />
                <h1 style={{ textAlign: "center", marginBottom: "10px" }}>
                  To update your information, please contact us via email at{" "}
                  <br />
                  <a href="mailto:info.qwertykeyboards@gmail.com">
                    info.qwertykeyboards@gmail.com
                  </a>{" "}
                </h1>
              </div>
            </div>
            <div className={s.ordersCont}>
              <h1 className={s.title}>Your orders</h1>
              <div className={s.container}>
                {userOrders.length < 1 ? (
                  <h1 className={s.title2}>You haven't placed any order yet</h1>
                ) : (
                  userOrders.map((order) => {
                    return (
                      <div
                        key={order._id}
                        className={s.orderContainer}
                        onClick={() => handleOpen(order)}
                      >
                        <h1>Order #</h1>
                        {order.orderNumber}
                      </div>
                    );
                  })
                )}
              </div>
            </div>
          </div>
          <ProfileOrder
            order={selectedOrder}
            handleClose={handleClose}
            open={open}
            setOpen={setOpen}
          ></ProfileOrder>
        </>
      )}
    </>
  );
}
